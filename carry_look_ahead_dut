module cla_4bit (
    input  [3:0] A, B,
    input        Cin,
    output [3:0] Sum,
    output       Cout,
    output       PG, // Group Propagate
    output       GG  // Group Generate
);

    wire [3:0] G, P; // Generate and Propagate
    wire [3:1] C;

    // Generate and Propagate signals
    assign G = A & B;      // Generate
    assign P = A ^ B;      // Propagate

    // Carry look-ahead logic
    assign C[1] = G[0] | (P[0] & Cin);
    assign C[2] = G[1] | (P[1] & G[0]) | (P[1] & P[0] & Cin);
    assign C[3] = G[2] | (P[2] & G[1]) | (P[2] & P[1] & G[0]) | (P[2] & P[1] & P[0] & Cin);
    assign Cout = G[3] | (P[3] & G[2]) | (P[3] & P[2] & G[1]) | 
                  (P[3] & P[2] & P[1] & G[0]) | (P[3] & P[2] & P[1] & P[0] & Cin);

    // Sum bits
    assign Sum[0] = P[0] ^ Cin;
    assign Sum[1] = P[1] ^ C[1];
    assign Sum[2] = P[2] ^ C[2];
    assign Sum[3] = P[3] ^ C[3];

    // Group Generate and Propagate (for hierarchical CLA)
    assign GG = G[3] | (P[3] & G[2]) | 
                (P[3] & P[2] & G[1]) | 
                (P[3] & P[2] & P[1] & G[0]);

    assign PG = P[3] & P[2] & P[1] & P[0];

endmodule
